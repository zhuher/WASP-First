namespace ZhukoWaspHwFirst;

internal class Program
{
    private static string OneOne()
    {
        string toPrint       = "";
        int    columnCounter = 0;
        for (int a1 = 9; a1 > 0; --a1)
        {
            for (int a2 = a1 - 1; a2 >= 0; --a2)
            {
                for (int a3 = a2 - 1; a3 >= 0; --a3)
                {
                    for (int a4 = a3 - 1; a4 >= 0; --a4)
                    {
                        toPrint += $"{a1}{a2}{a3}{a4}{(columnCounter == 9 ? '\n' : ' ')}";
                        columnCounter += columnCounter == 9
                            ? -9
                            : 1;
                    }
                }
            }
        }

        return toPrint;
    }

    private static string OneTwo(int size)
    {
        string toPrint = "";
        for (int i = 0; i < size; ++i)
        {
            for (int j = 0; j < size; ++j)
            {
                int printNum = size - (Helper.Max(i, j) - Helper.Min(i, j));
                toPrint
                    += $"{' '.Multiply($"{size}".Length - $"{printNum}".Length)}{printNum}{(j == size - 1 ? '\n' : ' ')}";
            }
        }

        return toPrint;
    }

    private static string OneFour(int size)
    {
        string toPrint      = "";
        long    widestMember = Helper.GetBiggestPascalTriangleNumber(size - 1);
        for (int i = 0; i < size; ++i)
        {
            int num = 1;
            toPrint +=
                $"{' '.Multiply($"{size - 1}".Length - $"{i}".Length)}{i}{' '.Multiply(($"{widestMember}".Length / 2 + 1) * (size - 1 - i) + 1)}";
            for (int j = 0; j <= i; ++j)
            {
                toPrint +=
                    $"{' '.Multiply($"{widestMember}".Length - $"{num}".Length + 1)}{num}";
                num = num * (i - j) / (j + 1);
            }

            toPrint += '\n';
        }

        return toPrint;
    }

    private static string TwoOne(long num) => num.Bases10To2();

    private static string TwoTwo(long a, long b)
    {
        long sum = a + b;
        return $"{'0'.Multiply(sum.Bases10To2().Length - a.Bases10To2().Length)}{a.Bases10To2()}\n{'+'.Multiply(sum.Bases10To2().Length)}\n{'0'.Multiply(sum.Bases10To2().Length - b.Bases10To2().Length)}{b.Bases10To2()}\n{'='.Multiply(sum.Bases10To2().Length)}\n{sum.Bases10To2()}";
    }

    private static string Test(long num) => num.Bases10To2();

    private static string TwoThree(short first, short second, short third, short fourth) => $"{BitOp.PackShorts(first, second, third, fourth)}";

    private static string TwoFour(long packed)
        => $"{packed.Bases10To2().UnpackShorts()[0]} {packed.Bases10To2().UnpackShorts()[1]} {packed.Bases10To2().UnpackShorts()[2]} {packed.Bases10To2().UnpackShorts()[3]}";

    private static void Main(string[] args)
    {
        //TODO: Input restriction for every method
        //TODO: Document every method
        //TODO: Cleanup types also faf0ba is a nice colour
        //╝╗╔╚╣╩╦╠═║╬
        string[][] menuItems = { new[] { "11", "12", "14", "21", "22", "23", "24", "69" }, new[] { "Волшебные числа", "Дальше - меньше", "Треугольник Паскаля", "Двоичная система", "Сложение в столбик", "Упаковка шортиков", "Распаковка шортиков", "TEST" } };
        while (true)
        {
            Console.Write($"{Helper.EraseScreenUp(80)}{menuItems.FormMenu()}\nЧто желаете?\n");
            short taskNum = 0;
            while (true)
            {
                Console.Write("> ");
                string? task    = Console.ReadLine();
                if (task == null)
                {
                    Console.Write(Helper.EraseScreenUp(1));
                    continue;
                }

                taskNum = Convert.ToInt16(task);

                if (taskNum == 0)
                {
                    Console.Write(Helper.EraseScreenUp(1));
                    continue;
                }

                break;
            }

            switch (taskNum)
            {
                case 11:
                    Console.WriteLine(OneOne());
                    Console.ReadKey();
                    break;
                case 12:
                    Console.WriteLine("Введите размер матрицы.");
                    Console.WriteLine(OneTwo(Convert.ToInt32(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case 14:
                    Console.WriteLine("Введите кол-во рядов треугольника Паскаля. 27 и более будет слишком широко!");
                    Console.WriteLine(OneFour(Convert.ToInt32(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case 21:
                    Console.WriteLine("Введите число для перевода в двоичную систему.");
                    Console.WriteLine(TwoOne(Convert.ToInt64(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case 22:
                    Console.WriteLine("Введите число для перевода в двоичную систему.");
                    Console.WriteLine(TwoTwo(Convert.ToInt64(Console.ReadLine()), Convert.ToInt64(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case 23:
                    Console.WriteLine("Введите число для перевода в двоичную систему.");
                    Console.WriteLine(TwoThree(Convert.ToInt16(Console.ReadLine()), Convert.ToInt16(Console.ReadLine()), Convert.ToInt16(Console.ReadLine()), Convert.ToInt16(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case 24:
                    Console.WriteLine("Введите число для перевода в двоичную систему.");
                    Console.WriteLine(TwoFour(Convert.ToInt64(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case 69:
                    Console.WriteLine("Введите число.");
                    Console.WriteLine(Test(Convert.ToInt64(Console.ReadLine())));
                    Console.ReadKey();
                    break;
                case -1: return;
                default: continue;
            }
        }
    }
    /* 
 01111111111111111111111111111111
 10000000000000000000000000000000
 11111111111111111111111111111111
 111111111111111111111111111111111111111111111110000000111111111
 111111111111111111111111111111111111111111111111111111100000001
 1111111111111111111111111111111111111111111111111111111111111111
 1000000000000000000000000000000000000000000000000000000000000000
-1000000000000000000000000000000000000000000000000000000000000000
Input: 26
 0                                                                                                            1
 1                                                                                                        1       1
 2                                                                                                    1       2       1
 3                                                                                                1       3       3       1
 4                                                                                            1       4       6       4       1
 5                                                                                        1       5      10      10       5       1
 6                                                                                    1       6      15      20      15       6       1
 7                                                                                1       7      21      35      35      21       7       1
 8                                                                            1       8      28      56      70      56      28       8       1
 9                                                                        1       9      36      84     126     126      84      36       9       1
10                                                                    1      10      45     120     210     252     210     120      45      10       1
11                                                                1      11      55     165     330     462     462     330     165      55      11       1
12                                                            1      12      66     220     495     792     924     792     495     220      66      12       1
13                                                        1      13      78     286     715    1287    1716    1716    1287     715     286      78      13       1
14                                                    1      14      91     364    1001    2002    3003    3432    3003    2002    1001     364      91      14       1
15                                                1      15     105     455    1365    3003    5005    6435    6435    5005    3003    1365     455     105      15       1
16                                            1      16     120     560    1820    4368    8008   11440   12870   11440    8008    4368    1820     560     120      16       1
17                                        1      17     136     680    2380    6188   12376   19448   24310   24310   19448   12376    6188    2380     680     136      17       1
18                                    1      18     153     816    3060    8568   18564   31824   43758   48620   43758   31824   18564    8568    3060     816     153      18       1
19                                1      19     171     969    3876   11628   27132   50388   75582   92378   92378   75582   50388   27132   11628    3876     969     171      19       1
20                            1      20     190    1140    4845   15504   38760   77520  125970  167960  184756  167960  125970   77520   38760   15504    4845    1140     190      20       1
21                        1      21     210    1330    5985   20349   54264  116280  203490  293930  352716  352716  293930  203490  116280   54264   20349    5985    1330     210      21       1
22                    1      22     231    1540    7315   26334   74613  170544  319770  497420  646646  705432  646646  497420  319770  170544   74613   26334    7315    1540     231      22       1
23                1      23     253    1771    8855   33649  100947  245157  490314  817190 1144066 1352078 1352078 1144066  817190  490314  245157  100947   33649    8855    1771     253      23       1
24            1      24     276    2024   10626   42504  134596  346104  735471 1307504 1961256 2496144 2704156 2496144 1961256 1307504  735471  346104  134596   42504   10626    2024     276      24       1
25        1      25     300    2300   12650   53130  177100  480700 1081575 2042975 3268760 4457400 5200300 5200300 4457400 3268760 2042975 1081575  480700  177100   53130   12650    2300     300      25       1

//     Input: 50
    50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1
    49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2
    48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3
    47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4
    46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5
    45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6
    44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7
    43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8
    42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9
    41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10
    40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11
    39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12
    38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13
    37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14
    36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15
    35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16
    34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17
    33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18
    32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19
    31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20
    30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21
    29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22
    28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23
    27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24
    26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25
    25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26
    24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27
    23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28
    22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29
    21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30
    20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31
    19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32
    18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33
    17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34
    16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35
    15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36
    14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38 37
    13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39 38
    12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40 39
    11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41 40
    10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42 41
     9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43 42
     8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44 43
     7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45 44
     6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46 45
     5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47 46
     4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48 47
     3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49 48
     2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 49
     1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
//
    9876 9875 9874 9873 9872 9871 9870 9865 9864 9863
    9862 9861 9860 9854 9853 9852 9851 9850 9843 9842
    9841 9840 9832 9831 9830 9821 9820 9810 9765 9764
    9763 9762 9761 9760 9754 9753 9752 9751 9750 9743
    9742 9741 9740 9732 9731 9730 9721 9720 9710 9654
    9653 9652 9651 9650 9643 9642 9641 9640 9632 9631
    9630 9621 9620 9610 9543 9542 9541 9540 9532 9531
    9530 9521 9520 9510 9432 9431 9430 9421 9420 9410
    9321 9320 9310 9210 8765 8764 8763 8762 8761 8760
    8754 8753 8752 8751 8750 8743 8742 8741 8740 8732
    8731 8730 8721 8720 8710 8654 8653 8652 8651 8650
    8643 8642 8641 8640 8632 8631 8630 8621 8620 8610
    8543 8542 8541 8540 8532 8531 8530 8521 8520 8510
    8432 8431 8430 8421 8420 8410 8321 8320 8310 8210
    7654 7653 7652 7651 7650 7643 7642 7641 7640 7632
    7631 7630 7621 7620 7610 7543 7542 7541 7540 7532
    7531 7530 7521 7520 7510 7432 7431 7430 7421 7420
    7410 7321 7320 7310 7210 6543 6542 6541 6540 6532
    6531 6530 6521 6520 6510 6432 6431 6430 6421 6420
    6410 6321 6320 6310 6210 5432 5431 5430 5421 5420
    5410 5321 5320 5310 5210 4321 4320 4310 4210 3210

    */
}
